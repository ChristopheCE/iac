name: "terraform-plan"

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
      TerraformBackendResourceGroup:
        type: string
        required: true
      TerraformBackendStorageAccount:
        type: string
        required: true
      TerraformBackendStorageContainer:
        type: string
        required: true
      TerraformBackendStorageKey:
        type: string
        required: true
    outputs:
      plan:
        description: "Name of the terraform plan file"     
        value: ${{ jobs.terraform_plan.outputs.plan }}
      artifact:
        description: "Name of the artifact containing the terraform plan file"     
        value: ${{ jobs.terraform_plan.outputs.artifact }}
jobs:  
  terraform_plan:
    runs-on: ubuntu-latest
    outputs:
      plan: ${{ steps.plan-name.outputs.plan }}
      artifact: ${{ steps.plan-name.outputs.artifact }}
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        # with:
          # cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: |
          terraform init \
          -backend-config="resource_group_name=${{ inputs.TerraformBackendResourceGroup }}" \
          -backend-config="storage_account_name=${{ inputs.TerraformBackendStorageAccount }}" \
          -backend-config="container_name=${{ inputs.TerraformBackendStorageContainer }}" \
          -backend-config="key=${{ inputs.TerraformBackendStorageKey }}" \
      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

      - name: Set outputs
        run: |
          echo "::set-output name=plan::terraform.tfplan"
          echo "::set-output name=artifact::${{ inputs.environment }}_${{ github.run_number }}"
        id: set-outputs

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        id: plan
        run: terraform plan -input=false -out ${{ steps.set-outputs.outputs.plan }}

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.0
        with:
          # Artifact name
          name: ${{ steps.set-outputs.outputs.artifact }}
          # A file, directory or wildcard pattern that describes what to upload
          path: ${{ steps.set-outputs.outputs.plan }}
